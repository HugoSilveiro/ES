swagger: '2.0'
info:
  title: Music Playlists
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
paths:
  /upload_song:
    post:
      tags: [upload_song]
      operationId: app.upload_song
      summary: upload new song to the server

      consumes:
        - multipart/form-data
      parameters:
        - name: title
          type: string
          in: formData
        - name: artist
          type: string
          in: formData
        - name: album
          type: string
          in: formData
        - name: year
          type: integer
          in: formData
        - name: path
          type: string
          in: formData
        - name: songfile
          in: formData
          description: The uploaded file data
          required: true
          type: file
      responses:
        200:
          description: file uploaded successfully
        403:
          description: user is not logged in
  /:
    get:
      tags: [Login_menu]
      operationId: app.login_menu
      summary: show menu for logging into an account

      produces:
        - text/html

      responses:
        200:
          description: Login menu returned

  /create_account_menu:
    get:
      tags: [Create_account_menu]
      operationId: app.create_account_menu
      summary: show menu for creating a new account

      produces:
        - text/html

      responses:
        200:
          description: Account creation menu returned.



  /account/create:
    post:
      tags: [Create_account]
      operationId: app.create_account
      summary: create new user account
      parameters:
        - name: user
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Account created successfully
        403:
          description: Account already exists

  /account/edit:
    put:
      tags: [Edit_account]
      operationId: app.edit_account
      summary: edit user's account
      parameters:
        - name: edituserinfo
          in: body
          schema:
            $ref: '#/definitions/EditUser'

      responses:
        200:
          description: Account edited successfully
        403:
          description: User is not allowed to edit the given user's info

  /account/login:
    get:
      tags: [Login]
      operationId: app.login
      summary: attempt to login to an account

      produces:
        - text/html

      parameters:
        - name: username
          in: query
          type: string
        - name: password
          in: query
          type: string
      responses:
        200:
          description: Login successful
        403:
          description: Login failedsubl

  /account/logout:
    get:
      tags: [Logout]
      operationId: app.logout
      summary: logout
      produces:
        - text/html

      responses:
        200:
          description: Login successful

  /song:
    get:
      tags: [Search_song]
      operationId: app.search_song
      summary: search for a song by artist or title
      parameters:
        - name: username
          in: query
          type: string


        - name: token
          in: query
          type: string


        - name: criteria
          in: query
          type: string
      responses:
        200:
          description: songs were returned successfully
        403:
          description: user is not logged in

    put:
      tags: [Disown_song]
      operationId: app.disown_song
      summary: Disown a song
      parameters:
        - name: song_id
          in: body
          schema:
            $ref: '#/definitions/SongID'
      responses:
        204:
          description: Song was disowned
        403:
          description: User is not the owner or is not logged in
        404:
          description: Song does not exist


    delete:
      tags: [Delete_song]
      operationId: app.delete_song
      summary: Remove a song
      parameters:
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'
        - name: song_id
          in: query
          type: integer
      responses:
        204:
          description: Song was deleted
        403:
          description: User is not the owner or is not logged in
        404:
          description: Song does not exist
  /playlist/addsong:
    put:
      tags: [Add_music_to_playlist]
      operationId: app.add_music_to_playlist
      summary: Add a single song to the playlist
      parameters:
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'
        - name: song_id
          in: query
          type: integer
        - name: playlist_id
          in: query
          type: integer


      responses:
        204:
          description: Song was added
        403:
          description: User is not the owner or is not logged in
        404:
          description: Song or playlist doesn't exist

  /playlist/removesong:
    delete:
      tags: [Remove_music_from_playlist]
      operationId: app.remove_music_from_playlist
      summary: Remove a song from the playlist
      parameters:
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'
        - name: song_id
          in: query
          type: integer
        - name: playlist_id
          in: query
          type: integer


      responses:
        200:
          description: Song was removed
        403:
          description: User is not the owner or is not logged in
        404:
          description: Song doesn't exist

  /account/create_playlist:
    post:
      tags: [Create_playlist]
      operationId: app.create_playlist
      summary: create new playlist
      parameters:
        - name: playlist_name
          in: body
          schema:
            $ref: '#/definitions/Playlist_name'
      responses:
        200:
          description: Playlist created successfully
        400:
          description: Playlist already exists with that name
        403:
          description: User is not logged in

  /account/edit_playlist_name:
    put:
      tags: [Edit_playlist_name]
      operationId: app.edit_playlist_name
      summary: edit playlist name
      parameters:
        - name: playlist_id
          in: query
          type: integer
        - name: new_name
          in: query
          type: string
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'
      responses:
        200:
          description: Playlist name updated successfully
        404:
          description: Playlist name not found
        403:
          description: User is not logged in

  /account/playlist/list:
    get:
      tags: [list_playlists]
      operationId: app.list_playlists
      summary: list playlists owned by user

      responses:
        200:
          description: Listed playlists
        403:
          description: token could not be validated

  /account/playlist/list_playlist_songs:
    get:
      tags: [list_playlist_songs]
      operationId: app.list_playlist_songs
      summary: list playlist songs
      parameters:
        - name: playlist_id
          in: query
          type: integer
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'
      responses:
        200:
          description: Listed songs
        404:
          description: Playlist not found
        403:
          description: User is not logged in

  /account/playlist/delete:
    delete:
      tags: [delete_playlist]
      operationId: app.delete_playlist
      summary: delete playlist
      parameters:
        - name: playlist_id
          in: query
          type: integer
      responses:
        200:
          description: Listed songs
        404:
          description: Playlist not found
        403:
          description: User is not logged in

  /account/edit_song:
    put:
      tags: [edit_song]
      operationId: app.edit_song
      summary: edit song
      parameters:
        - name: newsongdata
          in: body
          schema:
            $ref: '#/definitions/EditSong'
      responses:
        200:
          description: Song edited
        404:
          description: Song not found
        403:
          description: User is not logged in

  /account/playlist/list_songs:
    get:
      tags: [list_songs]
      operationId: app.list_songs
      summary: list songs
      parameters:
        - name: user_token
          in: body
          schema:
            $ref: '#/definitions/User_token'

      responses:
        200:
          description: Listed songs
        404:
          description: Songs not found
        403:
          description: User is not logged in


definitions:
  EditSong:
    type: object
    required:
      - id
      - newtitle
      - newalbum
      - newartist
      - newyear
    properties:
      id:
        type: integer
        description: Song id
        example: 1
      newtitle:
        type: string
        description: new song title
        example: 1
      newyear:
        type: integer
        description: new song year
        example: 1
      newartist:
        type: string
        description: new song artist
        example: 1
      newalbum:
        type: string
        description: new song album
        example: 1


  SongID:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        description: Song id
        example: 1

  User_token:
    type: object
    required:
      - username
      - token
    properties:
      username:
        type: string
        description: User's email
        example: "bata@gmail.com"
        minLength: 1
        maxLength: 100
      token:
        type: string
        description: User's session token
        example: "ouhfuidhsfskh"
        minLength: 1
        maxLength: 100

  Playlist_name:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Playlist name
        example: "rock"
        minLength: 1
        maxLength: 100


  EditUser:
    type: object
    required:
      - username
      - token
      - newname
      - newemail
      - newpassword
    properties:
      username:
        type: string
        description: user's email
        example: "bata@gmail.com"
        minLength: 1
        maxLength: 100
      token:
        type: string
        description: User's session token
        example: "ouhfuidhsfskh"
        minLength: 1
        maxLength: 100
      newname:
        type: string
        description: User's name
        example: "Susie"
        minLength: 1
        maxLength: 100
      newemail:
        type: string
        description: user's email
        example: "bata@gmail.com"
        minLength: 1
        maxLength: 100
      newpassword:
        type: string
        minLength: 1
        maxLength: 100
        description: Account password
        example: "cenas"

  User:
    type: object
    required:
      - name
      - email
      - password
    properties:
      name:
        type: string
        description: User's name
        example: "Susie"
        minLength: 1
        maxLength: 100
      email:
        type: string
        description: user's email
        example: "bata@gmail.com"
        minLength: 1
        maxLength: 100
      password:
        type: string
        minLength: 1
        maxLength: 100
        description: Account password
        example: "cenas"
